devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
data("measure")
head(measure)
vignette("practical1")
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
data("measure")
head(measure)
vignette("practical1")
library(codataVis)
install.packages("codataVis")
drat::addRepo("rcourses")
install.packages("drat")
drat::addRepo("rcourses")
install.packages("codataVis")
vignette("practical1", package = "codataVis")
?Beauty
library(codataVis)
?Beauty
devtools::use_vignette("practical2")
View(measure)
cov(subset(measure, gender == "female")[, c("chest", "waist", "hips")])
cor(measure[, c("chest", "waist", "hips")])
scale(measure[, c("chest", "waist", "hips")], center = FALSE)
scale(measure[, c("chest", "waist", "hips")], center = FALSE, scale = apply(x, 2, sd, na.rm = TRUE))
scale(measure[, c("chest", "waist", "hips")], center = FALSE)
m.features <- measure[, c("chest", "waist", "hips")]
x <- dist(scale(m.features, center = FALSE, scale = apply(m.features, 2, sd, na.rm = TRUE)))
scale(m.features, center = FALSE, scale = apply(m.features, 2, sd, na.rm = TRUE))
x
as.dist(round(as.matrix(x), 2)[1:12, 1:12])
x <- dist(scale(measure[, c("chest", "waist", "hips")]))
as.dist(round(as.matrix(x), 2)[1:12, 1:12])
x <- dist(scale(measure[, c("chest", "waist", "hips")]))
as.dist(round(as.matrix(x), 2)[1:12, 1:12])
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
data("measure")
head(measure)
vignette("practical1")
vignette("practical1", package = "essexBigdata")
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
data("measure")
head(measure)
vignette("practical1", package = "essexBigdata")
require(essexBigdata)
data(measure, package = "essexBigdata")
# Details of the 'measure' dataset can be shown by:
?measure
require(essexBigdata)
data(measure, package = "essexBigdata")
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
data("measure")
head(measure)
vignette("practical1", package = "essexBigdata")
require(essexBigdata)
data(measure, package = "essexBigdata")
?measure
head(measure)
dim(measure)
colnames(measure)
cov(measure[, c("chest", "waist", "hips")])
cov(subset(measure, gender == "female")[, c("chest", "waist", "hips")])
cor(measure[, c("chest", "waist", "hips")])
x <- dist(scale(measure[, c("chest", "waist", "hips")]))
as.dist(round(as.matrix(x), 2)[1:12, 1:12])
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
data("measure")
head(measure)
vignette("practical1", package = "essexBigdata")
?essexBigdata
?measure
library(essexBigdata)
head(measure)
vignette("practical1", package = "essexBigdata")
?measure
detach("package:essexBigdata", unload=TRUE)
data("measure")
data("measure")
vignette("practical1", package = "essexBigdata")
?measure
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
data("measure")
?measure
?measure
detach("package:essexBigdata", unload=TRUE)
remove.packages("essexBigdata")
detach("package:codataVis", unload=TRUE)
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
data("measure")
head(measure)
vignette("practical1", package = "essexBigdata")
?measure
?measure
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
?measure
vignette("practical1", package = "essexBigdata")
?measure
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
data("measure")
head(measure)
vignette("practical1", package = "essexBigdata")
?measure
vignette("practical1", package = "essexBigdata")
?measure
vignette("practical1", package = "essexBigdata")
?measure
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
data("measure")
head(measure)
vignette("practical1", package = "essexBigdata")
?measure
devtools::use_vignette("practical2")
set.seed(02022015)
x <- matrix(rnorm(50*2), ncol=2)
x[1:25,1] <- x[1:25,1]+3
x[1:25,2] <- x[1:25,2]-4
plot(x[1:25,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5,xlab="x",ylab="y",cex.lab=1.5,cex.axis=1.5)
points(x[26:50,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5)
my.km <- kmeans(x,centers=2,nstart=20)
my.km$cluster
points(x[my.km$cluster==1,],xlim=c(-3,7),ylim=c(-7,3),col=3,pch="x",cex=1)
points(x[my.km$cluster==2,],xlim=c(-3,7),ylim=c(-7,3),col=4,pch="+",cex=1)
plot(x[1:25,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5,xlab="x",ylab="y",cex.lab=1.5,cex.axis=1.5)
points(x[26:50,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5)
my.km <- kmeans(x,centers=3,nstart=20)
my.km$cluster
points(x[my.km$cluster==1,],xlim=c(-3,7),ylim=c(-7,3),col=3,pch="x",cex=1)
points(x[my.km$cluster==2,],xlim=c(-3,7),ylim=c(-7,3),col=4,pch="+",cex=1)
points(x[my.km$cluster==3,],xlim=c(-3,7),ylim=c(-7,3),col=5,pch="s",cex=1)
plot(x[1:25,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5,xlab="x",ylab="y",cex.lab=1.5,cex.axis=1.5)
points(x[26:50,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5)
my.km <- kmeans(x,centers=4,nstart=20)
my.km$cluster
points(x[my.km$cluster==1,],xlim=c(-3,7),ylim=c(-7,3),col=3,pch="x",cex=1)
points(x[my.km$cluster==2,],xlim=c(-3,7),ylim=c(-7,3),col=4,pch="+",cex=1)
points(x[my.km$cluster==3,],xlim=c(-3,7),ylim=c(-7,3),col=5,pch="s",cex=1)
points(x[my.km$cluster==4,],xlim=c(-3,7),ylim=c(-7,3),col=6,pch="*",cex=1)
plot(x[1:25,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5,xlab="x",ylab="y",cex.lab=1.5,cex.axis=1.5)
points(x[26:50,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5)
my.km <- kmeans(x,centers=5,nstart=200)
my.km$cluster
points(x[my.km$cluster==1,],xlim=c(-3,7),ylim=c(-7,3),col=3,pch="x",cex=1)
points(x[my.km$cluster==2,],xlim=c(-3,7),ylim=c(-7,3),col=4,pch="+",cex=1)
points(x[my.km$cluster==3,],xlim=c(-3,7),ylim=c(-7,3),col=5,pch="s",cex=1)
points(x[my.km$cluster==4,],xlim=c(-3,7),ylim=c(-7,3),col=6,pch="*",cex=1)
points(x[my.km$cluster==5,],xlim=c(-3,7),ylim=c(-7,3),col=2,pch="=",cex=1)
set.seed(02022015)
x <- matrix(rnorm(50*2), ncol=2)
x
x[1:25,1] <- x[1:25,1]+3
x[1:25,2] <- x[1:25,2]-4
plot(x[1:25,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5,xlab="x",ylab="y",cex.lab=1.5,cex.axis=1.5)
points(x[26:50,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5)
my.km <- kmeans(x,centers=2,nstart=20)
my.km$cluster
points(x[my.km$cluster==1,],xlim=c(-3,7),ylim=c(-7,3),col=3,pch="x",cex=1)
points(x[my.km$cluster==2,],xlim=c(-3,7),ylim=c(-7,3),col=4,pch="+",cex=1)
plot(x[1:25,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5,xlab="x",ylab="y",cex.lab=1.5,cex.axis=1.5)
points(x[26:50,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5)
my.km <- kmeans(x,centers=3,nstart=20)
my.km$cluster
points(x[my.km$cluster==1,],xlim=c(-3,7),ylim=c(-7,3),col=3,pch="x",cex=1)
points(x[my.km$cluster==2,],xlim=c(-3,7),ylim=c(-7,3),col=4,pch="+",cex=1)
points(x[my.km$cluster==3,],xlim=c(-3,7),ylim=c(-7,3),col=5,pch="s",cex=1)
plot(x[1:25,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5,xlab="x",ylab="y",cex.lab=1.5,cex.axis=1.5)
points(x[26:50,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5)
my.km <- kmeans(x,centers=4,nstart=20)
my.km$cluster
points(x[my.km$cluster==1,],xlim=c(-3,7),ylim=c(-7,3),col=3,pch="x",cex=1)
points(x[my.km$cluster==2,],xlim=c(-3,7),ylim=c(-7,3),col=4,pch="+",cex=1)
points(x[my.km$cluster==3,],xlim=c(-3,7),ylim=c(-7,3),col=5,pch="s",cex=1)
points(x[my.km$cluster==4,],xlim=c(-3,7),ylim=c(-7,3),col=6,pch="*",cex=1)
plot(x[1:25,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5,xlab="x",ylab="y",cex.lab=1.5,cex.axis=1.5)
points(x[26:50,],xlim=c(-3,7),ylim=c(-7,3),col=1,cex=1.5)
my.km <- kmeans(x,centers=5,nstart=200)
my.km$cluster
points(x[my.km$cluster==1,],xlim=c(-3,7),ylim=c(-7,3),col=3,pch="x",cex=1)
points(x[my.km$cluster==2,],xlim=c(-3,7),ylim=c(-7,3),col=4,pch="+",cex=1)
points(x[my.km$cluster==3,],xlim=c(-3,7),ylim=c(-7,3),col=5,pch="s",cex=1)
points(x[my.km$cluster==4,],xlim=c(-3,7),ylim=c(-7,3),col=6,pch="*",cex=1)
points(x[my.km$cluster==5,],xlim=c(-3,7),ylim=c(-7,3),col=2,pch="=",cex=1)
plot(x[1:25,], xlim=c(-3,7), ylim=c(-7,3), col=1, cex=1.5, xlab="x", ylab="y", cex.lab=1.5, cex.axis=1.5)
points(x[26:50,], col=1, cex=1.5)
View(x)
require(ggplot2)
ggplot(x, aes(V1,V2)) + geom_point()
as.data.frame(x)
ggplot(as.data.frame(x), aes(V1,V2)) + geom_point()
ggplot(as.data.frame(x)) + geom_point()
ggplot(as.data.frame(x), aes(V1,V2)) + geom_point()
my.km <- kmeans(x,centers=2,nstart=20)
my.km$cluster
ggplot(as.data.frame(x), aes(V1,V2)) + geom_point(fill=my.km$cluster)
ggplot(as.data.frame(x), aes(V1,V2)) + geom_point(color=my.km$cluster)
my.km <- kmeans(x,centers=3,nstart=20)
my.km$cluster
ggplot(as.data.frame(x), aes(V1,V2)) + geom_point(color=my.km$cluster)
my.km <- kmeans(x,centers=4,nstart=20)
ggplot(as.data.frame(x), aes(V1,V2)) + geom_point(color=my.km$cluster)
my.km <- kmeans(x,centers=5,nstart=200)
ggplot(as.data.frame(x), aes(V1,V2)) + geom_point(color=my.km$cluster)
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::load_all(".")
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
data("measure")
head(measure)
vignette("practical1", package = "essexBigdata")
?measure
vignette("practical2", package = "essexBigdata")
s.pottery <- scale(pottery[,c(1:9)])
data("pottery", package = "HSAUR2")
pairs(pottery)
plot(pottery[,c(1,2)])
s.pottery <- scale(pottery[,c(1:9)])
d.pottery <- dist(s.pottery)
hclust(d.pottery, method="complete")
plot(hclust(d.pottery, method="complete"),labels=(as.character(pottery$kiln)),
cex=.75, main="",xlab="complete-linkage",ylab="level",sub="")
par(mfrow=c(1,1))
plot(hclust(d.pottery, method="complete"),labels=(as.character(pottery$kiln)),
hang=-1,cex=.75, main="",xlab="complete-linkage",ylab="level",sub="")
par(mfrow=c(2,2))
plot(hclust(d.pottery, method="complete"),labels=(as.character(pottery$kiln)),
hang=-1,cex=.5, main="",xlab="complete-linkage",ylab="level",sub="")
plot(hclust(d.pottery, method="single"),labels=(as.character(pottery$kiln)),
hang=-1,cex=.5, main="",xlab="single-linkage",ylab="level",sub="")
plot(hclust(d.pottery, method="average"),labels=(as.character(pottery$kiln)),
hang=-1,cex=.5, main="",xlab="average-linkage",ylab="level",sub="")
plot(hclust(d.pottery, method="centroid"),labels=(as.character(pottery$kiln)),
hang=-1,cex=.5, main="",xlab="centroid-linkage",ylab="level",sub="")
par(mfrow=c(1,1))
d.pottery <- as.dist(1- cor(pottery[,c(1:9)])^2)
plot(hclust(d.pottery, method="average"),
hang=-1,cex=.75, main="",xlab="average-linkage",ylab="level",sub="")
library(clue)
install.packages("clue")
library(clue)
plot(ls_fit_addtree(d.pottery))
s.pottery <- scale(pottery[,c(1:9)])
d.pottery <- dist(s.pottery)
plot(hclust(d.pottery, method="complete"),labels=(as.character(pottery$kiln)),
cex=.75, main="",xlab="complete-linkage",ylab="level",sub="")
head(d.pottery)
View(pottery)
par(mfrow=c(2,2))
plot(hclust(d.pottery, method="complete"),labels=(as.character(pottery$kiln)),
hang=-1,cex=.5, main="",xlab="complete-linkage",ylab="level",sub="")
plot(hclust(d.pottery, method="single"),labels=(as.character(pottery$kiln)),
hang=-1,cex=.5, main="",xlab="single-linkage",ylab="level",sub="")
plot(hclust(d.pottery, method="average"),labels=(as.character(pottery$kiln)),
hang=-1,cex=.5, main="",xlab="average-linkage",ylab="level",sub="")
plot(hclust(d.pottery, method="centroid"),labels=(as.character(pottery$kiln)),
hang=-1,cex=.5, main="",xlab="centroid-linkage",ylab="level",sub="")
plot(ls_fit_addtree(d.pottery))
plot(ls_fit_addtree(d.pottery))
data("pottery", package = "HSAUR2")
data("pottery", package = "HSAUR2")
data("pottery", package = "HSAUR2")
head(pottery)
dim(pottery)
s.pottery <- scale(pottery[,c(1:9)])    # normalise features
d.pottery <- dist(s.pottery)            # calculate distances between observations
d.pottery
plot(hclust(d.pottery, method="complete"),labels=(as.character(pottery$kiln)),
hang=-1,cex=.75, main="",xlab="complete-linkage",ylab="level",sub="")
plot(hclust(d.pottery, method="complete"),labels=(as.character(pottery$kiln)),
cex=.75, main="",xlab="complete-linkage",ylab="level",sub="")
plot(hclust(d.pottery, method="complete"),labels=(as.character(pottery$kiln)),
hang=-1,cex=.75, main="",xlab="complete-linkage",ylab="level",sub="")
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
data("measure")
head(measure)
vignette("practical1", package = "essexBigdata")
?measure
vignette("practical2", package = "essexBigdata")
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
vignette("practical1", package = "essexBigdata")
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
<<<<<<< Updated upstream
#install.packages("/media/PhD/GitHub/essexBigdata_0.1.0.tar.gz", repos = NULL, type = "source")
library(essexBigdata)
vignette("practical1", package = "essexBigdata")
install.packages("pander")
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
vignette("practical1", package = "essexBigdata")
library(pander)
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
vignette("practical1", package = "essexBigdata")
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
vignette("practical1", package = "essexBigdata")
vignette("practical2", package = "essexBigdata")
vignette("practical1.html", package = "essexBigdata")
=======
library(essexBigdata)
vignette("practical1", package = "essexBigdata")
vignette("practical2", package = "essexBigdata")
>>>>>>> Stashed changes
data("Default", package = "ISLR")
install.packages("ISLR")
data("Default", package = "ISLR")
str(Default)
plot(income ~ balance, data = Default[(Default$default=="No") & (runif(10000)>.95),], pch="o", col=4,
xlim=c(0,3000), ylim=c(0,70000), xlab="balance", ylab="income", main="(a)", cex.lab=1.5)
points(income ~ balance , data=Default[Default$default=="Yes",], pch="+", col=2)
mylogisticclassifier <- glm(default ~ balance,data=Default,family=binomial )
summary(mylogisticclassifier)
library(MASS)
lda.Default <- lda(default ~ balance + income , data=Default)
lda.Default
names(lda.Default)
summary(lda.Default)
lda.Default
names(lda.Default)
lda.Default$lev
lda.Default$terms
lda.Default$xlevels
lda.Default
default.predicted <- predict(lda.Default)$class
table(default.predicted,Default$default)
table(Default$default)
table(default.predicted)
table(default.predicted, Default$default)
(table(default.predicted,Default$default)[1,2] +
table(default.predicted,Default$default)[2,1]) / (dim(Default)[1])
dim(Default)
M.err <- (table(default.predicted,Default$default)[1,2] +
table(default.predicted,Default$default)[2,1]) / (dim(Default)[1])
M.err
library(ipred)
install.packages("ipred")
library(ipred)
mypredict.lda <- function(object, newdata)
predict(object, newdata = newdata)$class
set.seed(25012015)
errorest(default ~ ., data=Default, model=lda, estimator = c("cv"),
est.para=control.errorest(k=10), predict= mypredict.lda)
M.err
errorest(default ~ ., data=Default, model=lda, estimator = c("boot"),
est.para=control.errorest(nboot=200,strat=TRUE), predict= mypredict.lda)
errorest(default ~ ., data=Default, model=lda, estimator = c("boot"),
est.para=control.errorest(nboot=200), predict= mypredict.lda)
2+5
errorest(default ~ ., data=Default, model=lda, estimator = c("boot"),
est.para=control.errorest(nboot=5), predict= mypredict.lda)
errorest(default ~ ., data=Default, model=lda, estimator = c("boot"),
est.para=control.errorest(nboot=200), predict= mypredict.lda)
errorest(default ~ ., data=Default, model=lda, estimator = c("boot"),
est.para=control.errorest(nboot=5), predict= mypredict.lda)
library(tree)
install.packages("tree")
library(tree)
data(GlaucomaMVF)
str(GlaucomaMVF)
tree.glaucoma <- tree(Class ~ ., data=GlaucomaMVF[,c(1:62,67)])
tree.glaucoma
summary(tree.glaucoma)
plot(tree.glaucoma)
text(tree.glaucoma)
prune.glaucoma <- prune.misclass(tree.glaucoma, best=5)
tree.glaucoma
prune.glaucoma <- prune.misclass(tree.glaucoma, best=5)
plot(prune.glaucoma)
text(prune.glaucoma)
prune.glaucoma
tree.glaucoma
plot(tree.glaucoma)
text(tree.glaucoma)
View(GlaucomaMVF)
forest.glaucoma <- randomForest(Class ~ ., data=GlaucomaMVF[,c(1:62,67)])
install.packages("randomForest")
library(randomForest)
forest.glaucoma <- randomForest(Class ~ ., data=GlaucomaMVF[,c(1:62,67)])
forest.glaucoma
sqrt(62)
forest.glaucoma
errorest(Class ~ ., data=GlaucomaMVF[,c(1:62,67)],model=randomForest,
estimator = "cv", predict= mypredict.randomForest)
mypredict.randomForest <- function(object, newdata)
predict(object, newdata = newdata, type = c("response"))
errorest(Class ~ ., data=GlaucomaMVF[,c(1:62,67)],model=randomForest,
estimator = "cv", predict= mypredict.randomForest)
errorest(Class ~ ., data=GlaucomaMVF[,c(1:62,67)],model=randomForest,
estimator = "boot", predict= mypredict.randomForest)
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
vignette("htmlwg", package = "essexBigdata")
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install(build_vignettes = TRUE)
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::install(build_vignettes = TRUE)
library(essexBigdata)
vignette("practical3", package = "essexBigdata")
data("pottery", package = "HSAUR2")
pairs(pottery)
plot(pottery[,c(1,2)])
View(pottery)
scatterplot3d(pottery[,c(1,2,10)])
library("essexBigdata", lib.loc="/usr/local/src/R-3.3.1/library")
scatterplot3d(pottery[,c(1,2,10)])
library(HSAUR2)
scatterplot3d(pottery[,c(1,2,10)])
install.packages("scatterplot3d")
library(scatterplot3d)
scatterplot3d(pottery[,c(1,2,10)])
scatterplot3d(pottery[,c(1,2,3,10)])
scatterplot3d(pottery[,c(1,2,10)])
scatterplot3d(pottery[,c(1,2,3,10)])
data("USairpollution", package = "HSAUR2")
?USairpollution
vignette("practical2", package = "essexBigdata")
USairpollution
USairpollution
data("pottery", package = "HSAUR2")
head(pottery)
s.pottery <- scale(pottery[,c(1:9)])
d.pottery <- dist(s.pottery)
d.pottery
d.pottery
